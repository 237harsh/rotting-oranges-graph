class Solution {
public:
     bool bfs(int i,int j,vector<vector<int>>& g)
    {
        int n=g.size(),m=g[0].size();
        if(i<0||j<0||i>n-1||j>m-1||g[i][j]==0)return false;
        
        if(g[i][j]==1)
        {
           g[i][j]=2;
           return true;
        }
        else
        return false;
        
    }
    int orangesRotting(vector<vector<int>>& g) {
        
    
      if(g.size()==0)return 0;
        
      int n=g.size(),tot=0,c=0,time=0,d=0;
      int m=g[0].size();
      queue<pair<int,int>>q;
      for(int i=0;i<n;i++)
      {
          for(int j=0;j<m;j++)
          {
              if(g[i][j]!=0)
              tot++;
              if(g[i][j]==2){
              q.push({i,j});
                  d++;
              }
          }
          
      }
      
      if(tot==0)return 0;
      while(!q.empty())
      {
          int n=q.size();
          time++;
          c+=n;
          for(int i=1;i<=n;i++)
          {
              auto it=q.front();
              q.pop();
              
              int x,y;
              x=it.first;
              y=it.second;
              if(bfs(x+1,y,g))q.push({x+1,y});
              if(bfs(x-1,y,g))q.push({x-1,y});
               if(bfs(x,y+1,g))q.push({x,y+1});
                if(bfs(x,y-1,g))q.push({x,y-1});
                
          }
          
      }
      if(c==tot)
      return time-1;
      else
      return -1;
    }
   
};
https://leetcode.com/problems/rotting-oranges/submissions/
